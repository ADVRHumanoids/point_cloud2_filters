#! /usr/bin/env python

PACKAGE = 'point_cloud2_filters'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator ()
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add ("leaf_size_x", double_t, 0, "The size of a leaf (on x) used for downsampling", 0.01, 0, 1.0)
gen.add ("leaf_size_y", double_t, 0, "The size of a leaf (on y) used for downsampling", 0.01, 0, 1.0)
gen.add ("leaf_size_z", double_t, 0, "The size of a leaf (on z) used for downsampling", 0.01, 0, 1.0)
gen.add ("min_points_per_voxel", int_t, 0, "The minimum number of points required for a voxel to be used.", 1, 1, 100000)
gen.add ("downsample_all_data", bool_t, 0, "Set to true if all fields need to be downsampled, or false if just XYZ.", True)
gen.add ("filter_field_name", str_t, 0, "The field name used for filtering", "z")
gen.add ("filter_limit_min", double_t, 0, "The minimum allowed field value a point will be considered from",  0, -1000, 1000)
gen.add ("filter_limit_max", double_t, 0, "The maximum allowed field value a point will be considered from", 1, -1000, 1000)
gen.add ("negative", bool_t, 0, "Set to true if we want to return the data outside the interval specified by setFilterLimits (min, max)", False)

exit (gen.generate (PACKAGE, "point_cloud2_filters", "VoxelGridPointCloud2"))
