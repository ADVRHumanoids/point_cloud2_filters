#! /usr/bin/env python

PACKAGE = 'point_cloud2_filters'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator ()
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add ("axis_x", double_t, 0, "The x component of the normal to the plane to be removed.",  0, 0, 1)
gen.add ("axis_y", double_t, 0, "The y component of the normal to the plane to be removed.",  0, 0, 1)
gen.add ("axis_z", double_t, 0, "The z component of the normal to the plane to be removed.",  1, 0, 1)
gen.add ("eps_angle", double_t, 0, "Tolerance angle (rad) to the plane to be considered normal to the axis",  0.15, -3.15, 3.15)
gen.add ("distance_threshold", double_t, 0, "",  0.01, 0, 10)
gen.add ("optimize_coefficents", bool_t, 0, "Optimize the coefficents or not", True)
gen.add ("max_iterations", int_t, 0, "",  50, 1, 200)
gen.add ("probability", double_t, 0, "",  0.99, 0.01, 1)
gen.add ("min_radius", double_t, 0, "",  -1, 0, 1000)
gen.add ("max_radius", double_t, 0, "",  1000, 0, 1000)
gen.add ("negative", bool_t, 0, "Set whether to filter out (remove) the plane (true) or all the rest (false).", True)

# from pcl https://pointclouds.org/documentation/group__sample__consensus.html
# but some of them are not implemented, see https://github.com/PointCloudLibrary/pcl/blob/master/segmentation/include/pcl/segmentation/impl/sac_segmentation.hpp for any updates
model_type = gen.enum([ gen.const("SACMODEL_PLANE",      int_t, 0, ""),
                       gen.const("SACMODEL_LINE",     int_t, 1, ""),
                       gen.const("SACMODEL_CIRCLE2D",      int_t, 2, ""),
                       gen.const("SACMODEL_CIRCLE3D", int_t, 3, ""),
                       gen.const("SACMODEL_SPHERE ", int_t, 4, ""),
#                        gen.const("SACMODEL_CONE", int_t, 6, ""),
#                        gen.const("SACMODEL_TORUS",     int_t, 7, ""),
                       gen.const("SACMODEL_PARALLEL_LINE",      int_t, 8, ""),
                       gen.const("SACMODEL_PERPENDICULAR_PLANE", int_t, 9, ""),
#                        gen.const("SACMODEL_PARALLEL_LINES ", int_t, 10, ""),
#                        gen.const("SACMODEL_NORMAL_PLANE", int_t, 11, ""),
#                        gen.const("SACMODEL_NORMAL_SPHERE", int_t, 12, ""),
#                        gen.const("SACMODEL_REGISTRATION",     int_t, 13, ""),
#                        gen.const("SACMODEL_REGISTRATION_2D",      int_t, 14, ""),
                       gen.const("SACMODEL_PARALLEL_PLANE", int_t, 15, ""),
#                        gen.const("SACMODEL_NORMAL_PARALLEL_PLANE ", int_t, 16, ""),
                       gen.const("SACMODEL_STICK", int_t, 17, ""),
                       gen.const("SACMODEL_ELLIPSE3D", int_t, 18, "")],
                     "Geometric model to look for")
gen.add("model_type", int_t, 0, "Geometric model to look for", 16, 0, 18, edit_method=model_type)

method_type = gen.enum([ gen.const("SAC_RANSAC",      int_t, 0, ""),
                       gen.const("SAC_LMEDS",     int_t, 1, ""),
                       gen.const("SAC_MSAC",      int_t, 2, ""),
                       gen.const("SAC_RRANSAC", int_t, 3, ""),
                       gen.const("SAC_RMSAC ", int_t, 4, ""),
                       gen.const("SAC_MLESAC", int_t, 5, ""),
                       gen.const("SAC_PROSAC", int_t, 6, "")],
                     "Sample consensus estimator see pcl doc")
gen.add("method_type", int_t, 0, "Sample consensus estimator", 0, 0, 6, edit_method=method_type)

exit (gen.generate (PACKAGE, "point_cloud2_filters", "SacSegmentationExtractPointCloud2"))

